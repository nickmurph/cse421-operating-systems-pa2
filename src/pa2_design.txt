		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Nicholas Murphy <nfmurphy@buffalo.edu>
Michael Cleversley <mbclever@buffalo.edu>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	setup_stack (void **esp, const char *file_name) 
		Creates the stack by following the steps laid out in the recitation slides, adding 			
		the arguments in reverse order and pushing 0 as the fake return address.

	process_execute (const char *file_name) 
		Most important work is parsing the file_name and creating a new thread to execute 			
		it

	process_wait (tid_t child_tid UNUSED) 
		Uses a while loop for a primitive implementation of waiting. Will be altered in 		
		phase 3 with the extension of wait() in syscall.c

	

	

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

	Argument passing was implemented by reading the elements of argv in reverse order to 		
	ensure they enter the stack correctly. Overflowing the stack is avoided by pushing the 		
	null sentinel at the end of the process.



---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
	strtok_r is thread safe (according to the Ubuntu man page) and also has the benefit of 		
	being a reentrant function (again according to the Ubuntu man page), allowing for the 		
	maintenance of context on successive calls.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
	1. Preserves the micro-kernel ideal of a compact kernel by moving that functionality 			
	outside of the kernel.
	2. Security: If you silo the separation into a user's shell, you reduce their access to 	
	the kernel and minimize the chance of bugs/exploitations exposing the system to attack.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	static void syscall_handler (struct intr_frame *f);
		Accesses the syscall at f->esp, uses a switch statement to decide which system 			
		call to execute, and increments the stack accordingly to access the arguments and 			
		feed them to the relevant function.
	
	static void is_valid_pointer(void *user_pointer)
		Verifies that the pointer is valid by checking the three cases indicating it 			
		wouldn't be (doesn't point to kernel virtual address space, not null, doesn't 			
		point to unmapped virtual memory), triggering a call of exit(-1) if any of those 			
		are true.
	
	struct child_element *get_thread_child(tid_t tid);
		Retrieves a child_element using only the given tid by looping through a maintained list
		of children for each thread.

	struct file_descriptor* get_file_from_fd(int given_fd);
		Nearly identical to get_thread_child, but for a list of files instead of threads.

	struct file_descriptor {
    	struct list_elem fd_elem;
    	struct file *actual_file;
    	int fd;
	};
		Fairly self-explanatory, maintains all necessary information to be retrieved from a fd in
		get_file_from_fd().
	
	struct child_element {
		struct list_elem child_elem;
		struct thread *child_thread;
		int pid_child; 
		int exit;
	};
		list_elem is necessary for use with the list.c functions. The thread itself is maintained as well
		to access thread-specific functions and fields. pid_child is to identify the correct child in
		get_thread_child. exit was intended to be the child's exit status, but I could never get it to 
		function the right way with wait.

	Changes to thread struct:
	struct semaphore sema_exec; // Semaphore used when a child was loading
    struct semaphore sema_waiting; // Used when a thread wa waiting for a child to exit
    struct list children;	// List of all children threads
    struct thread *parent;	// This thread's parent
    int exit_status;		// Exit status (was not working in wait)
	struct list file_list;	// List of files
	int num_of_descriptors;	// fd identifier, intialized to 1 so the first ++ would bring it to 2, avoiding the special fd's of 0 and 1

	

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

	We haven't worked much with file descriptors pre-Phase 3, but FDs are associated with 		
	files by a mapping of fd numbers to file entities. File descriptors are unique per-process,
	and each process maintains its own using file_list, as well as the num_of_descriptors identifier.
	Additionally, there are special file descriptors (0 and 1) that indicate
	standard input and output, which were relevant for syscalls like read and write.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

	Reading: Very similar to write (below). According to the documentation, if fd = 1 then we
	call input_getc and return its result. If the fd = 1, according to the documentation, then 
	this indicates standard output, which don't read so we simply return 0. Else, we
	acquire a lock - file_lock - and call file_read using the file acquired and the given parameters.
	

	Writing: Partially implemented, fully in phase 3. For Phase 2, we check if fd = 1 for 
	STDOUT and then call putbuf, passing the buffer and size as as arguments. Putbuf handles 
	printing to the console. As a continuation of the previous, we first acquire a file_lock
	in order to assure that we're the only ones with access to the filesystem. Then, we check
	if fd = 0, as this indicates standard input. Otherwise, we simply acquire the file element
	using the fd, then call file_write using the actual file and the given parameters, and 
	return with the return value of file_write.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
	It could either be one or two inspections, based on how many pages the data spans. The same goes 
	for the syscall that copies 2 bytes of data. It's hard to see any room for improvement.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

	The syscall itself simply calls process_wait. It is very close to working,
	the only thing that doesn't work is the exit code, even though I've tried 
	several approaches. All it does is retrieve the child thread using our get_thread_child
	method, call sema_down on that child's 'sema_waiting' semaphore to actually do the waiting, 
	then returns the exit status (which is the part that didn't work).

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

	This issue is primarily confronted by the is_valid_pointer function, which allows us to 	
	check pointers before dereferencing them without muddying other functions with repetitive 	  
	code. The function itself simply relies on several built-in functions, such as is_user_vaddr
	and pagedir_get_page. Any faulty access is handled by returning exit(-1). This way, checking 
	a pointer in the other functions is only one line, and one of the easiest parts of the function itself.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

	One of the locks we maintain globally is called file_lock. So, before we enter process_execute,
	we set the return value to -1 and then acquire the lock. We then change the return value - "the_pid" - 
	and then release the lock. This way, any race conditions are avoided, and we can perform simple 
	error checking in process_execute to return -1 if necessary. Additionally, if anything goes wrong,
	the fallback for the return value is -1, as it was assigned to be above.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
	As mentioned previously, the wait syscall simply calls process_wait. Before C exists: we try to 
	retrieve the child using get_thread_child, and if none is found, we return -1. Otherwise, after 
	C exists: we call sema_down on the aforementioned sema_waiting semaphore to ensure race conditions
	are avoided. Freeing the resources was an oversight, and likely part of the reason why we only have 
	a 60.8 from make grade.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
	There were two options presented, either validate the pointer before using it, or simply
	let it fault and then edit the fault-handling code. The first seemed much more intuitive,
	and several TAs said it was easier, so of course we chose the first method. It did seem like
	the right choice, as simply validating the pointer in a single line wherever we needed to within
	syscall.c was incredibly compact and succint.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
	I see several advantages to using a simple struct and an external function. By using an
	external function, we can abstract most of the actual functionality away, and focus on the syscall
	itself. Additionally, by maintaining a list of files for each thread, we gain access to several
	functions provided by list.c, and the kernel is always aware of the open files.

	A possible disadvantage is the sheer size of maintaining all of the open files, but efficiency was not
	exactly a top priority of this project.


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
	-We did not change this.
	-Not really sure what this question is asking, but I saw on Piazza that the pid_t and tid_t
	are essentially identical, so I see no reason to change it.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
